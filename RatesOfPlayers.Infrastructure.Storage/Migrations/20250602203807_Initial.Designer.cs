// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RatesOfPlayers.Infrastructure.Storage.Contexts;

#nullable disable

namespace RatesOfPlayers.Infrastructure.Storage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250602203807_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("RatesOfPlayers.Domain.Bets.Bet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Prize")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bets", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bets_Amount", "Amount > 0");

                            t.HasCheckConstraint("CK_Bets_Prize", "Prize > 0 OR Prize IS NULL");

                            t.HasCheckConstraint("CK_Bets_Settlement_after_bet", "SettlementDate IS NULL OR SettlementDate >= Date");
                        });
                });

            modelBuilder.Entity("RatesOfPlayers.Domain.Players.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegistrationDate");

                    b.HasIndex("Status");

                    b.ToTable("Players", null, t =>
                        {
                            t.HasCheckConstraint("CK_Players_Name_Length", "LENGTH(Name) >= 3");
                        });
                });

            modelBuilder.Entity("RatesOfPlayers.Domain.Transactions.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("PlayerId");

                    b.ToTable("Transactions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transactions_Amount", "Amount > 0");
                        });
                });

            modelBuilder.Entity("RatesOfPlayers.Domain.Bets.Bet", b =>
                {
                    b.HasOne("RatesOfPlayers.Domain.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RatesOfPlayers.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("RatesOfPlayers.Domain.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
